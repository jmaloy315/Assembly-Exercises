reverse_prefix_sum:
   # PROLOGUE
   subu $sp, $sp, 8        # expand stack by 8 bytes
   sw   $ra, 8($sp)        # push $ra (ret addr, 4 bytes)
   sw   $fp, 4($sp)        # push $fp (4 bytes)
   addu $fp, $sp, 8        # set $fp to saved $ra

   # BODY

   subu $sp, $sp, 4 # saving r on the stack
   sw $t6, 4($sp)

   lw $t5, 0($a0) # t5 represents *arr

   beq $t5, -1, retzero

   subu $sp, $sp, 4 # saving the value of arr on the stack 
   sw $t5, 4($sp)

   add $a0, $a0, 4
   jal reverse_prefix_sum # recursive call on arr + 1
   lw $t5, 4($sp) # restore *arr
   sub $a0, $a0, 4 # restore $a0

   move $t0, $v0 # $t0 is now reverse_prefix_sum(arr+1)
   add $t6, $t5, $t0 # the value of r is now in $t6

   lw $a0, 4($sp) # restoring $a0

   sw $t6, 0($a0) #setting value of $a0 to r

   move $v0, $t6 #returning r

   j ret

retzero:
   li $v0, 0
   j ret

ret:		
   # EPILOGUE
   move $sp, $fp           # restore $sp
   lw   $ra, ($fp)         # restore saved $ra
   lw   $fp, -4($sp)       # restore saved $fp
   j    $ra                # return to kernel

